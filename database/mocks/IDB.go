// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	rivals "github.com/bchaillou003/marvel-family-backend/models/rivals"
)

// DatabaseMock is an autogenerated mock type for the IDB type
type DatabaseMock struct {
	mock.Mock
}

type DatabaseMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseMock) EXPECT() *DatabaseMock_Expecter {
	return &DatabaseMock_Expecter{mock: &_m.Mock}
}

// CreateAbility provides a mock function with given fields: ctx, ability
func (_m *DatabaseMock) CreateAbility(ctx context.Context, ability *rivals.Ability) (*rivals.Ability, error) {
	ret := _m.Called(ctx, ability)

	if len(ret) == 0 {
		panic("no return value specified for CreateAbility")
	}

	var r0 *rivals.Ability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Ability) (*rivals.Ability, error)); ok {
		return rf(ctx, ability)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Ability) *rivals.Ability); ok {
		r0 = rf(ctx, ability)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Ability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rivals.Ability) error); ok {
		r1 = rf(ctx, ability)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_CreateAbility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAbility'
type DatabaseMock_CreateAbility_Call struct {
	*mock.Call
}

// CreateAbility is a helper method to define mock.On call
//   - ctx context.Context
//   - ability *rivals.Ability
func (_e *DatabaseMock_Expecter) CreateAbility(ctx interface{}, ability interface{}) *DatabaseMock_CreateAbility_Call {
	return &DatabaseMock_CreateAbility_Call{Call: _e.mock.On("CreateAbility", ctx, ability)}
}

func (_c *DatabaseMock_CreateAbility_Call) Run(run func(ctx context.Context, ability *rivals.Ability)) *DatabaseMock_CreateAbility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rivals.Ability))
	})
	return _c
}

func (_c *DatabaseMock_CreateAbility_Call) Return(_a0 *rivals.Ability, _a1 error) *DatabaseMock_CreateAbility_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_CreateAbility_Call) RunAndReturn(run func(context.Context, *rivals.Ability) (*rivals.Ability, error)) *DatabaseMock_CreateAbility_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAchievement provides a mock function with given fields: ctx, achievement
func (_m *DatabaseMock) CreateAchievement(ctx context.Context, achievement *rivals.Achievement) (*rivals.Achievement, error) {
	ret := _m.Called(ctx, achievement)

	if len(ret) == 0 {
		panic("no return value specified for CreateAchievement")
	}

	var r0 *rivals.Achievement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Achievement) (*rivals.Achievement, error)); ok {
		return rf(ctx, achievement)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Achievement) *rivals.Achievement); ok {
		r0 = rf(ctx, achievement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Achievement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rivals.Achievement) error); ok {
		r1 = rf(ctx, achievement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_CreateAchievement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAchievement'
type DatabaseMock_CreateAchievement_Call struct {
	*mock.Call
}

// CreateAchievement is a helper method to define mock.On call
//   - ctx context.Context
//   - achievement *rivals.Achievement
func (_e *DatabaseMock_Expecter) CreateAchievement(ctx interface{}, achievement interface{}) *DatabaseMock_CreateAchievement_Call {
	return &DatabaseMock_CreateAchievement_Call{Call: _e.mock.On("CreateAchievement", ctx, achievement)}
}

func (_c *DatabaseMock_CreateAchievement_Call) Run(run func(ctx context.Context, achievement *rivals.Achievement)) *DatabaseMock_CreateAchievement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rivals.Achievement))
	})
	return _c
}

func (_c *DatabaseMock_CreateAchievement_Call) Return(_a0 *rivals.Achievement, _a1 error) *DatabaseMock_CreateAchievement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_CreateAchievement_Call) RunAndReturn(run func(context.Context, *rivals.Achievement) (*rivals.Achievement, error)) *DatabaseMock_CreateAchievement_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCharacter provides a mock function with given fields: ctx, character
func (_m *DatabaseMock) CreateCharacter(ctx context.Context, character *rivals.Character) (*rivals.Character, error) {
	ret := _m.Called(ctx, character)

	if len(ret) == 0 {
		panic("no return value specified for CreateCharacter")
	}

	var r0 *rivals.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Character) (*rivals.Character, error)); ok {
		return rf(ctx, character)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Character) *rivals.Character); ok {
		r0 = rf(ctx, character)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Character)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rivals.Character) error); ok {
		r1 = rf(ctx, character)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_CreateCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCharacter'
type DatabaseMock_CreateCharacter_Call struct {
	*mock.Call
}

// CreateCharacter is a helper method to define mock.On call
//   - ctx context.Context
//   - character *rivals.Character
func (_e *DatabaseMock_Expecter) CreateCharacter(ctx interface{}, character interface{}) *DatabaseMock_CreateCharacter_Call {
	return &DatabaseMock_CreateCharacter_Call{Call: _e.mock.On("CreateCharacter", ctx, character)}
}

func (_c *DatabaseMock_CreateCharacter_Call) Run(run func(ctx context.Context, character *rivals.Character)) *DatabaseMock_CreateCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rivals.Character))
	})
	return _c
}

func (_c *DatabaseMock_CreateCharacter_Call) Return(_a0 *rivals.Character, _a1 error) *DatabaseMock_CreateCharacter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_CreateCharacter_Call) RunAndReturn(run func(context.Context, *rivals.Character) (*rivals.Character, error)) *DatabaseMock_CreateCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCosmetic provides a mock function with given fields: ctx, cosmetic
func (_m *DatabaseMock) CreateCosmetic(ctx context.Context, cosmetic *rivals.Cosmetic) (*rivals.Cosmetic, error) {
	ret := _m.Called(ctx, cosmetic)

	if len(ret) == 0 {
		panic("no return value specified for CreateCosmetic")
	}

	var r0 *rivals.Cosmetic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Cosmetic) (*rivals.Cosmetic, error)); ok {
		return rf(ctx, cosmetic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Cosmetic) *rivals.Cosmetic); ok {
		r0 = rf(ctx, cosmetic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Cosmetic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rivals.Cosmetic) error); ok {
		r1 = rf(ctx, cosmetic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_CreateCosmetic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCosmetic'
type DatabaseMock_CreateCosmetic_Call struct {
	*mock.Call
}

// CreateCosmetic is a helper method to define mock.On call
//   - ctx context.Context
//   - cosmetic *rivals.Cosmetic
func (_e *DatabaseMock_Expecter) CreateCosmetic(ctx interface{}, cosmetic interface{}) *DatabaseMock_CreateCosmetic_Call {
	return &DatabaseMock_CreateCosmetic_Call{Call: _e.mock.On("CreateCosmetic", ctx, cosmetic)}
}

func (_c *DatabaseMock_CreateCosmetic_Call) Run(run func(ctx context.Context, cosmetic *rivals.Cosmetic)) *DatabaseMock_CreateCosmetic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rivals.Cosmetic))
	})
	return _c
}

func (_c *DatabaseMock_CreateCosmetic_Call) Return(_a0 *rivals.Cosmetic, _a1 error) *DatabaseMock_CreateCosmetic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_CreateCosmetic_Call) RunAndReturn(run func(context.Context, *rivals.Cosmetic) (*rivals.Cosmetic, error)) *DatabaseMock_CreateCosmetic_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLore provides a mock function with given fields: ctx, lore
func (_m *DatabaseMock) CreateLore(ctx context.Context, lore *rivals.Lore) (*rivals.Lore, error) {
	ret := _m.Called(ctx, lore)

	if len(ret) == 0 {
		panic("no return value specified for CreateLore")
	}

	var r0 *rivals.Lore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Lore) (*rivals.Lore, error)); ok {
		return rf(ctx, lore)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rivals.Lore) *rivals.Lore); ok {
		r0 = rf(ctx, lore)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Lore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rivals.Lore) error); ok {
		r1 = rf(ctx, lore)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_CreateLore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLore'
type DatabaseMock_CreateLore_Call struct {
	*mock.Call
}

// CreateLore is a helper method to define mock.On call
//   - ctx context.Context
//   - lore *rivals.Lore
func (_e *DatabaseMock_Expecter) CreateLore(ctx interface{}, lore interface{}) *DatabaseMock_CreateLore_Call {
	return &DatabaseMock_CreateLore_Call{Call: _e.mock.On("CreateLore", ctx, lore)}
}

func (_c *DatabaseMock_CreateLore_Call) Run(run func(ctx context.Context, lore *rivals.Lore)) *DatabaseMock_CreateLore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rivals.Lore))
	})
	return _c
}

func (_c *DatabaseMock_CreateLore_Call) Return(_a0 *rivals.Lore, _a1 error) *DatabaseMock_CreateLore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_CreateLore_Call) RunAndReturn(run func(context.Context, *rivals.Lore) (*rivals.Lore, error)) *DatabaseMock_CreateLore_Call {
	_c.Call.Return(run)
	return _c
}

// GetAbilityByID provides a mock function with given fields: ctx, id
func (_m *DatabaseMock) GetAbilityByID(ctx context.Context, id int64) (*rivals.Ability, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAbilityByID")
	}

	var r0 *rivals.Ability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*rivals.Ability, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *rivals.Ability); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Ability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAbilityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAbilityByID'
type DatabaseMock_GetAbilityByID_Call struct {
	*mock.Call
}

// GetAbilityByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *DatabaseMock_Expecter) GetAbilityByID(ctx interface{}, id interface{}) *DatabaseMock_GetAbilityByID_Call {
	return &DatabaseMock_GetAbilityByID_Call{Call: _e.mock.On("GetAbilityByID", ctx, id)}
}

func (_c *DatabaseMock_GetAbilityByID_Call) Run(run func(ctx context.Context, id int64)) *DatabaseMock_GetAbilityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DatabaseMock_GetAbilityByID_Call) Return(_a0 *rivals.Ability, _a1 error) *DatabaseMock_GetAbilityByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAbilityByID_Call) RunAndReturn(run func(context.Context, int64) (*rivals.Ability, error)) *DatabaseMock_GetAbilityByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAchievementByID provides a mock function with given fields: ctx, id
func (_m *DatabaseMock) GetAchievementByID(ctx context.Context, id int64) (*rivals.Achievement, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAchievementByID")
	}

	var r0 *rivals.Achievement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*rivals.Achievement, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *rivals.Achievement); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Achievement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAchievementByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAchievementByID'
type DatabaseMock_GetAchievementByID_Call struct {
	*mock.Call
}

// GetAchievementByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *DatabaseMock_Expecter) GetAchievementByID(ctx interface{}, id interface{}) *DatabaseMock_GetAchievementByID_Call {
	return &DatabaseMock_GetAchievementByID_Call{Call: _e.mock.On("GetAchievementByID", ctx, id)}
}

func (_c *DatabaseMock_GetAchievementByID_Call) Run(run func(ctx context.Context, id int64)) *DatabaseMock_GetAchievementByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DatabaseMock_GetAchievementByID_Call) Return(_a0 *rivals.Achievement, _a1 error) *DatabaseMock_GetAchievementByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAchievementByID_Call) RunAndReturn(run func(context.Context, int64) (*rivals.Achievement, error)) *DatabaseMock_GetAchievementByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAbility provides a mock function with given fields: ctx
func (_m *DatabaseMock) GetAllAbility(ctx context.Context) ([]rivals.Ability, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAbility")
	}

	var r0 []rivals.Ability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]rivals.Ability, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []rivals.Ability); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rivals.Ability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAllAbility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAbility'
type DatabaseMock_GetAllAbility_Call struct {
	*mock.Call
}

// GetAllAbility is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) GetAllAbility(ctx interface{}) *DatabaseMock_GetAllAbility_Call {
	return &DatabaseMock_GetAllAbility_Call{Call: _e.mock.On("GetAllAbility", ctx)}
}

func (_c *DatabaseMock_GetAllAbility_Call) Run(run func(ctx context.Context)) *DatabaseMock_GetAllAbility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_GetAllAbility_Call) Return(_a0 []rivals.Ability, _a1 error) *DatabaseMock_GetAllAbility_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAllAbility_Call) RunAndReturn(run func(context.Context) ([]rivals.Ability, error)) *DatabaseMock_GetAllAbility_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAchievement provides a mock function with given fields: ctx
func (_m *DatabaseMock) GetAllAchievement(ctx context.Context) ([]rivals.Achievement, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAchievement")
	}

	var r0 []rivals.Achievement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]rivals.Achievement, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []rivals.Achievement); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rivals.Achievement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAllAchievement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAchievement'
type DatabaseMock_GetAllAchievement_Call struct {
	*mock.Call
}

// GetAllAchievement is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) GetAllAchievement(ctx interface{}) *DatabaseMock_GetAllAchievement_Call {
	return &DatabaseMock_GetAllAchievement_Call{Call: _e.mock.On("GetAllAchievement", ctx)}
}

func (_c *DatabaseMock_GetAllAchievement_Call) Run(run func(ctx context.Context)) *DatabaseMock_GetAllAchievement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_GetAllAchievement_Call) Return(_a0 []rivals.Achievement, _a1 error) *DatabaseMock_GetAllAchievement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAllAchievement_Call) RunAndReturn(run func(context.Context) ([]rivals.Achievement, error)) *DatabaseMock_GetAllAchievement_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacter provides a mock function with given fields: ctx
func (_m *DatabaseMock) GetAllCharacter(ctx context.Context) ([]rivals.Character, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacter")
	}

	var r0 []rivals.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]rivals.Character, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []rivals.Character); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rivals.Character)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAllCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacter'
type DatabaseMock_GetAllCharacter_Call struct {
	*mock.Call
}

// GetAllCharacter is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) GetAllCharacter(ctx interface{}) *DatabaseMock_GetAllCharacter_Call {
	return &DatabaseMock_GetAllCharacter_Call{Call: _e.mock.On("GetAllCharacter", ctx)}
}

func (_c *DatabaseMock_GetAllCharacter_Call) Run(run func(ctx context.Context)) *DatabaseMock_GetAllCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_GetAllCharacter_Call) Return(_a0 []rivals.Character, _a1 error) *DatabaseMock_GetAllCharacter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAllCharacter_Call) RunAndReturn(run func(context.Context) ([]rivals.Character, error)) *DatabaseMock_GetAllCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCosmetic provides a mock function with given fields: ctx
func (_m *DatabaseMock) GetAllCosmetic(ctx context.Context) ([]rivals.Cosmetic, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCosmetic")
	}

	var r0 []rivals.Cosmetic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]rivals.Cosmetic, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []rivals.Cosmetic); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rivals.Cosmetic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAllCosmetic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCosmetic'
type DatabaseMock_GetAllCosmetic_Call struct {
	*mock.Call
}

// GetAllCosmetic is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) GetAllCosmetic(ctx interface{}) *DatabaseMock_GetAllCosmetic_Call {
	return &DatabaseMock_GetAllCosmetic_Call{Call: _e.mock.On("GetAllCosmetic", ctx)}
}

func (_c *DatabaseMock_GetAllCosmetic_Call) Run(run func(ctx context.Context)) *DatabaseMock_GetAllCosmetic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_GetAllCosmetic_Call) Return(_a0 []rivals.Cosmetic, _a1 error) *DatabaseMock_GetAllCosmetic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAllCosmetic_Call) RunAndReturn(run func(context.Context) ([]rivals.Cosmetic, error)) *DatabaseMock_GetAllCosmetic_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLore provides a mock function with given fields: ctx
func (_m *DatabaseMock) GetAllLore(ctx context.Context) ([]rivals.Lore, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLore")
	}

	var r0 []rivals.Lore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]rivals.Lore, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []rivals.Lore); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rivals.Lore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetAllLore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLore'
type DatabaseMock_GetAllLore_Call struct {
	*mock.Call
}

// GetAllLore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DatabaseMock_Expecter) GetAllLore(ctx interface{}) *DatabaseMock_GetAllLore_Call {
	return &DatabaseMock_GetAllLore_Call{Call: _e.mock.On("GetAllLore", ctx)}
}

func (_c *DatabaseMock_GetAllLore_Call) Run(run func(ctx context.Context)) *DatabaseMock_GetAllLore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DatabaseMock_GetAllLore_Call) Return(_a0 []rivals.Lore, _a1 error) *DatabaseMock_GetAllLore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetAllLore_Call) RunAndReturn(run func(context.Context) ([]rivals.Lore, error)) *DatabaseMock_GetAllLore_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharacterByID provides a mock function with given fields: ctx, id
func (_m *DatabaseMock) GetCharacterByID(ctx context.Context, id int64) (*rivals.Character, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCharacterByID")
	}

	var r0 *rivals.Character
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*rivals.Character, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *rivals.Character); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Character)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetCharacterByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharacterByID'
type DatabaseMock_GetCharacterByID_Call struct {
	*mock.Call
}

// GetCharacterByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *DatabaseMock_Expecter) GetCharacterByID(ctx interface{}, id interface{}) *DatabaseMock_GetCharacterByID_Call {
	return &DatabaseMock_GetCharacterByID_Call{Call: _e.mock.On("GetCharacterByID", ctx, id)}
}

func (_c *DatabaseMock_GetCharacterByID_Call) Run(run func(ctx context.Context, id int64)) *DatabaseMock_GetCharacterByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DatabaseMock_GetCharacterByID_Call) Return(_a0 *rivals.Character, _a1 error) *DatabaseMock_GetCharacterByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetCharacterByID_Call) RunAndReturn(run func(context.Context, int64) (*rivals.Character, error)) *DatabaseMock_GetCharacterByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCosmeticByID provides a mock function with given fields: ctx, id
func (_m *DatabaseMock) GetCosmeticByID(ctx context.Context, id int64) (*rivals.Cosmetic, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCosmeticByID")
	}

	var r0 *rivals.Cosmetic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*rivals.Cosmetic, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *rivals.Cosmetic); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Cosmetic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetCosmeticByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCosmeticByID'
type DatabaseMock_GetCosmeticByID_Call struct {
	*mock.Call
}

// GetCosmeticByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *DatabaseMock_Expecter) GetCosmeticByID(ctx interface{}, id interface{}) *DatabaseMock_GetCosmeticByID_Call {
	return &DatabaseMock_GetCosmeticByID_Call{Call: _e.mock.On("GetCosmeticByID", ctx, id)}
}

func (_c *DatabaseMock_GetCosmeticByID_Call) Run(run func(ctx context.Context, id int64)) *DatabaseMock_GetCosmeticByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DatabaseMock_GetCosmeticByID_Call) Return(_a0 *rivals.Cosmetic, _a1 error) *DatabaseMock_GetCosmeticByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetCosmeticByID_Call) RunAndReturn(run func(context.Context, int64) (*rivals.Cosmetic, error)) *DatabaseMock_GetCosmeticByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoreByID provides a mock function with given fields: ctx, id
func (_m *DatabaseMock) GetLoreByID(ctx context.Context, id int64) (*rivals.Lore, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLoreByID")
	}

	var r0 *rivals.Lore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*rivals.Lore, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *rivals.Lore); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rivals.Lore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseMock_GetLoreByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoreByID'
type DatabaseMock_GetLoreByID_Call struct {
	*mock.Call
}

// GetLoreByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *DatabaseMock_Expecter) GetLoreByID(ctx interface{}, id interface{}) *DatabaseMock_GetLoreByID_Call {
	return &DatabaseMock_GetLoreByID_Call{Call: _e.mock.On("GetLoreByID", ctx, id)}
}

func (_c *DatabaseMock_GetLoreByID_Call) Run(run func(ctx context.Context, id int64)) *DatabaseMock_GetLoreByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *DatabaseMock_GetLoreByID_Call) Return(_a0 *rivals.Lore, _a1 error) *DatabaseMock_GetLoreByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseMock_GetLoreByID_Call) RunAndReturn(run func(context.Context, int64) (*rivals.Lore, error)) *DatabaseMock_GetLoreByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseMock creates a new instance of DatabaseMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseMock {
	mock := &DatabaseMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
