// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	comics "github.com/bchaillou003/marvel-family-backend/models/comics"
	mock "github.com/stretchr/testify/mock"
)

// ClientSDKMock is an autogenerated mock type for the ISDK type
type ClientSDKMock struct {
	mock.Mock
}

type ClientSDKMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientSDKMock) EXPECT() *ClientSDKMock_Expecter {
	return &ClientSDKMock_Expecter{mock: &_m.Mock}
}

// GetAllCharacter provides a mock function with given fields:
func (_m *ClientSDKMock) GetAllCharacter() (*comics.CharacterDataWrapper, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacter")
	}

	var r0 *comics.CharacterDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (*comics.CharacterDataWrapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *comics.CharacterDataWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CharacterDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCharacter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacter'
type ClientSDKMock_GetAllCharacter_Call struct {
	*mock.Call
}

// GetAllCharacter is a helper method to define mock.On call
func (_e *ClientSDKMock_Expecter) GetAllCharacter() *ClientSDKMock_GetAllCharacter_Call {
	return &ClientSDKMock_GetAllCharacter_Call{Call: _e.mock.On("GetAllCharacter")}
}

func (_c *ClientSDKMock_GetAllCharacter_Call) Run(run func()) *ClientSDKMock_GetAllCharacter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCharacter_Call) Return(_a0 *comics.CharacterDataWrapper, _a1 error) *ClientSDKMock_GetAllCharacter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCharacter_Call) RunAndReturn(run func() (*comics.CharacterDataWrapper, error)) *ClientSDKMock_GetAllCharacter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacterByComicID provides a mock function with given fields: comicID
func (_m *ClientSDKMock) GetAllCharacterByComicID(comicID int64) (*comics.CharacterDataWrapper, error) {
	ret := _m.Called(comicID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacterByComicID")
	}

	var r0 *comics.CharacterDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CharacterDataWrapper, error)); ok {
		return rf(comicID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CharacterDataWrapper); ok {
		r0 = rf(comicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CharacterDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(comicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCharacterByComicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacterByComicID'
type ClientSDKMock_GetAllCharacterByComicID_Call struct {
	*mock.Call
}

// GetAllCharacterByComicID is a helper method to define mock.On call
//   - comicID int64
func (_e *ClientSDKMock_Expecter) GetAllCharacterByComicID(comicID interface{}) *ClientSDKMock_GetAllCharacterByComicID_Call {
	return &ClientSDKMock_GetAllCharacterByComicID_Call{Call: _e.mock.On("GetAllCharacterByComicID", comicID)}
}

func (_c *ClientSDKMock_GetAllCharacterByComicID_Call) Run(run func(comicID int64)) *ClientSDKMock_GetAllCharacterByComicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterByComicID_Call) Return(_a0 *comics.CharacterDataWrapper, _a1 error) *ClientSDKMock_GetAllCharacterByComicID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterByComicID_Call) RunAndReturn(run func(int64) (*comics.CharacterDataWrapper, error)) *ClientSDKMock_GetAllCharacterByComicID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacterByEventID provides a mock function with given fields: eventID
func (_m *ClientSDKMock) GetAllCharacterByEventID(eventID int64) (*comics.CharacterDataWrapper, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacterByEventID")
	}

	var r0 *comics.CharacterDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CharacterDataWrapper, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CharacterDataWrapper); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CharacterDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCharacterByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacterByEventID'
type ClientSDKMock_GetAllCharacterByEventID_Call struct {
	*mock.Call
}

// GetAllCharacterByEventID is a helper method to define mock.On call
//   - eventID int64
func (_e *ClientSDKMock_Expecter) GetAllCharacterByEventID(eventID interface{}) *ClientSDKMock_GetAllCharacterByEventID_Call {
	return &ClientSDKMock_GetAllCharacterByEventID_Call{Call: _e.mock.On("GetAllCharacterByEventID", eventID)}
}

func (_c *ClientSDKMock_GetAllCharacterByEventID_Call) Run(run func(eventID int64)) *ClientSDKMock_GetAllCharacterByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterByEventID_Call) Return(_a0 *comics.CharacterDataWrapper, _a1 error) *ClientSDKMock_GetAllCharacterByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterByEventID_Call) RunAndReturn(run func(int64) (*comics.CharacterDataWrapper, error)) *ClientSDKMock_GetAllCharacterByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacterBySeriesID provides a mock function with given fields: seriesID
func (_m *ClientSDKMock) GetAllCharacterBySeriesID(seriesID int64) (*comics.CharacterDataWrapper, error) {
	ret := _m.Called(seriesID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacterBySeriesID")
	}

	var r0 *comics.CharacterDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CharacterDataWrapper, error)); ok {
		return rf(seriesID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CharacterDataWrapper); ok {
		r0 = rf(seriesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CharacterDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCharacterBySeriesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacterBySeriesID'
type ClientSDKMock_GetAllCharacterBySeriesID_Call struct {
	*mock.Call
}

// GetAllCharacterBySeriesID is a helper method to define mock.On call
//   - seriesID int64
func (_e *ClientSDKMock_Expecter) GetAllCharacterBySeriesID(seriesID interface{}) *ClientSDKMock_GetAllCharacterBySeriesID_Call {
	return &ClientSDKMock_GetAllCharacterBySeriesID_Call{Call: _e.mock.On("GetAllCharacterBySeriesID", seriesID)}
}

func (_c *ClientSDKMock_GetAllCharacterBySeriesID_Call) Run(run func(seriesID int64)) *ClientSDKMock_GetAllCharacterBySeriesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterBySeriesID_Call) Return(_a0 *comics.CharacterDataWrapper, _a1 error) *ClientSDKMock_GetAllCharacterBySeriesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterBySeriesID_Call) RunAndReturn(run func(int64) (*comics.CharacterDataWrapper, error)) *ClientSDKMock_GetAllCharacterBySeriesID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCharacterByStoryID provides a mock function with given fields: storyID
func (_m *ClientSDKMock) GetAllCharacterByStoryID(storyID int64) (*comics.CharacterDataWrapper, error) {
	ret := _m.Called(storyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCharacterByStoryID")
	}

	var r0 *comics.CharacterDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CharacterDataWrapper, error)); ok {
		return rf(storyID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CharacterDataWrapper); ok {
		r0 = rf(storyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CharacterDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(storyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCharacterByStoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCharacterByStoryID'
type ClientSDKMock_GetAllCharacterByStoryID_Call struct {
	*mock.Call
}

// GetAllCharacterByStoryID is a helper method to define mock.On call
//   - storyID int64
func (_e *ClientSDKMock_Expecter) GetAllCharacterByStoryID(storyID interface{}) *ClientSDKMock_GetAllCharacterByStoryID_Call {
	return &ClientSDKMock_GetAllCharacterByStoryID_Call{Call: _e.mock.On("GetAllCharacterByStoryID", storyID)}
}

func (_c *ClientSDKMock_GetAllCharacterByStoryID_Call) Run(run func(storyID int64)) *ClientSDKMock_GetAllCharacterByStoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterByStoryID_Call) Return(_a0 *comics.CharacterDataWrapper, _a1 error) *ClientSDKMock_GetAllCharacterByStoryID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCharacterByStoryID_Call) RunAndReturn(run func(int64) (*comics.CharacterDataWrapper, error)) *ClientSDKMock_GetAllCharacterByStoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComic provides a mock function with given fields:
func (_m *ClientSDKMock) GetAllComic() (*comics.ComicDataWrapper, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllComic")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (*comics.ComicDataWrapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *comics.ComicDataWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllComic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComic'
type ClientSDKMock_GetAllComic_Call struct {
	*mock.Call
}

// GetAllComic is a helper method to define mock.On call
func (_e *ClientSDKMock_Expecter) GetAllComic() *ClientSDKMock_GetAllComic_Call {
	return &ClientSDKMock_GetAllComic_Call{Call: _e.mock.On("GetAllComic")}
}

func (_c *ClientSDKMock_GetAllComic_Call) Run(run func()) *ClientSDKMock_GetAllComic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientSDKMock_GetAllComic_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetAllComic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllComic_Call) RunAndReturn(run func() (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetAllComic_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComicByCharacterID provides a mock function with given fields: characterID
func (_m *ClientSDKMock) GetAllComicByCharacterID(characterID int64) (*comics.ComicDataWrapper, error) {
	ret := _m.Called(characterID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComicByCharacterID")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.ComicDataWrapper, error)); ok {
		return rf(characterID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.ComicDataWrapper); ok {
		r0 = rf(characterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(characterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllComicByCharacterID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComicByCharacterID'
type ClientSDKMock_GetAllComicByCharacterID_Call struct {
	*mock.Call
}

// GetAllComicByCharacterID is a helper method to define mock.On call
//   - characterID int64
func (_e *ClientSDKMock_Expecter) GetAllComicByCharacterID(characterID interface{}) *ClientSDKMock_GetAllComicByCharacterID_Call {
	return &ClientSDKMock_GetAllComicByCharacterID_Call{Call: _e.mock.On("GetAllComicByCharacterID", characterID)}
}

func (_c *ClientSDKMock_GetAllComicByCharacterID_Call) Run(run func(characterID int64)) *ClientSDKMock_GetAllComicByCharacterID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllComicByCharacterID_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetAllComicByCharacterID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllComicByCharacterID_Call) RunAndReturn(run func(int64) (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetAllComicByCharacterID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComicByCreatorID provides a mock function with given fields: creatorID
func (_m *ClientSDKMock) GetAllComicByCreatorID(creatorID int64) (*comics.ComicDataWrapper, error) {
	ret := _m.Called(creatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComicByCreatorID")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.ComicDataWrapper, error)); ok {
		return rf(creatorID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.ComicDataWrapper); ok {
		r0 = rf(creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllComicByCreatorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComicByCreatorID'
type ClientSDKMock_GetAllComicByCreatorID_Call struct {
	*mock.Call
}

// GetAllComicByCreatorID is a helper method to define mock.On call
//   - creatorID int64
func (_e *ClientSDKMock_Expecter) GetAllComicByCreatorID(creatorID interface{}) *ClientSDKMock_GetAllComicByCreatorID_Call {
	return &ClientSDKMock_GetAllComicByCreatorID_Call{Call: _e.mock.On("GetAllComicByCreatorID", creatorID)}
}

func (_c *ClientSDKMock_GetAllComicByCreatorID_Call) Run(run func(creatorID int64)) *ClientSDKMock_GetAllComicByCreatorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllComicByCreatorID_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetAllComicByCreatorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllComicByCreatorID_Call) RunAndReturn(run func(int64) (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetAllComicByCreatorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComicByEventID provides a mock function with given fields: eventID
func (_m *ClientSDKMock) GetAllComicByEventID(eventID int64) (*comics.ComicDataWrapper, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComicByEventID")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.ComicDataWrapper, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.ComicDataWrapper); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllComicByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComicByEventID'
type ClientSDKMock_GetAllComicByEventID_Call struct {
	*mock.Call
}

// GetAllComicByEventID is a helper method to define mock.On call
//   - eventID int64
func (_e *ClientSDKMock_Expecter) GetAllComicByEventID(eventID interface{}) *ClientSDKMock_GetAllComicByEventID_Call {
	return &ClientSDKMock_GetAllComicByEventID_Call{Call: _e.mock.On("GetAllComicByEventID", eventID)}
}

func (_c *ClientSDKMock_GetAllComicByEventID_Call) Run(run func(eventID int64)) *ClientSDKMock_GetAllComicByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllComicByEventID_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetAllComicByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllComicByEventID_Call) RunAndReturn(run func(int64) (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetAllComicByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComicBySeriesID provides a mock function with given fields: seriesID
func (_m *ClientSDKMock) GetAllComicBySeriesID(seriesID int64) (*comics.ComicDataWrapper, error) {
	ret := _m.Called(seriesID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComicBySeriesID")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.ComicDataWrapper, error)); ok {
		return rf(seriesID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.ComicDataWrapper); ok {
		r0 = rf(seriesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllComicBySeriesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComicBySeriesID'
type ClientSDKMock_GetAllComicBySeriesID_Call struct {
	*mock.Call
}

// GetAllComicBySeriesID is a helper method to define mock.On call
//   - seriesID int64
func (_e *ClientSDKMock_Expecter) GetAllComicBySeriesID(seriesID interface{}) *ClientSDKMock_GetAllComicBySeriesID_Call {
	return &ClientSDKMock_GetAllComicBySeriesID_Call{Call: _e.mock.On("GetAllComicBySeriesID", seriesID)}
}

func (_c *ClientSDKMock_GetAllComicBySeriesID_Call) Run(run func(seriesID int64)) *ClientSDKMock_GetAllComicBySeriesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllComicBySeriesID_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetAllComicBySeriesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllComicBySeriesID_Call) RunAndReturn(run func(int64) (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetAllComicBySeriesID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComicByStoryID provides a mock function with given fields: storyID
func (_m *ClientSDKMock) GetAllComicByStoryID(storyID int64) (*comics.ComicDataWrapper, error) {
	ret := _m.Called(storyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComicByStoryID")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.ComicDataWrapper, error)); ok {
		return rf(storyID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.ComicDataWrapper); ok {
		r0 = rf(storyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(storyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllComicByStoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComicByStoryID'
type ClientSDKMock_GetAllComicByStoryID_Call struct {
	*mock.Call
}

// GetAllComicByStoryID is a helper method to define mock.On call
//   - storyID int64
func (_e *ClientSDKMock_Expecter) GetAllComicByStoryID(storyID interface{}) *ClientSDKMock_GetAllComicByStoryID_Call {
	return &ClientSDKMock_GetAllComicByStoryID_Call{Call: _e.mock.On("GetAllComicByStoryID", storyID)}
}

func (_c *ClientSDKMock_GetAllComicByStoryID_Call) Run(run func(storyID int64)) *ClientSDKMock_GetAllComicByStoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllComicByStoryID_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetAllComicByStoryID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllComicByStoryID_Call) RunAndReturn(run func(int64) (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetAllComicByStoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCreator provides a mock function with given fields:
func (_m *ClientSDKMock) GetAllCreator() (*comics.CreatorDataWrapper, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCreator")
	}

	var r0 *comics.CreatorDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (*comics.CreatorDataWrapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *comics.CreatorDataWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CreatorDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCreator'
type ClientSDKMock_GetAllCreator_Call struct {
	*mock.Call
}

// GetAllCreator is a helper method to define mock.On call
func (_e *ClientSDKMock_Expecter) GetAllCreator() *ClientSDKMock_GetAllCreator_Call {
	return &ClientSDKMock_GetAllCreator_Call{Call: _e.mock.On("GetAllCreator")}
}

func (_c *ClientSDKMock_GetAllCreator_Call) Run(run func()) *ClientSDKMock_GetAllCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCreator_Call) Return(_a0 *comics.CreatorDataWrapper, _a1 error) *ClientSDKMock_GetAllCreator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCreator_Call) RunAndReturn(run func() (*comics.CreatorDataWrapper, error)) *ClientSDKMock_GetAllCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCreatorByComicID provides a mock function with given fields: comicID
func (_m *ClientSDKMock) GetAllCreatorByComicID(comicID int64) (*comics.CreatorDataWrapper, error) {
	ret := _m.Called(comicID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCreatorByComicID")
	}

	var r0 *comics.CreatorDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CreatorDataWrapper, error)); ok {
		return rf(comicID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CreatorDataWrapper); ok {
		r0 = rf(comicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CreatorDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(comicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCreatorByComicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCreatorByComicID'
type ClientSDKMock_GetAllCreatorByComicID_Call struct {
	*mock.Call
}

// GetAllCreatorByComicID is a helper method to define mock.On call
//   - comicID int64
func (_e *ClientSDKMock_Expecter) GetAllCreatorByComicID(comicID interface{}) *ClientSDKMock_GetAllCreatorByComicID_Call {
	return &ClientSDKMock_GetAllCreatorByComicID_Call{Call: _e.mock.On("GetAllCreatorByComicID", comicID)}
}

func (_c *ClientSDKMock_GetAllCreatorByComicID_Call) Run(run func(comicID int64)) *ClientSDKMock_GetAllCreatorByComicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorByComicID_Call) Return(_a0 *comics.CreatorDataWrapper, _a1 error) *ClientSDKMock_GetAllCreatorByComicID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorByComicID_Call) RunAndReturn(run func(int64) (*comics.CreatorDataWrapper, error)) *ClientSDKMock_GetAllCreatorByComicID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCreatorByEventID provides a mock function with given fields: eventID
func (_m *ClientSDKMock) GetAllCreatorByEventID(eventID int64) (*comics.CreatorDataWrapper, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCreatorByEventID")
	}

	var r0 *comics.CreatorDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CreatorDataWrapper, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CreatorDataWrapper); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CreatorDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCreatorByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCreatorByEventID'
type ClientSDKMock_GetAllCreatorByEventID_Call struct {
	*mock.Call
}

// GetAllCreatorByEventID is a helper method to define mock.On call
//   - eventID int64
func (_e *ClientSDKMock_Expecter) GetAllCreatorByEventID(eventID interface{}) *ClientSDKMock_GetAllCreatorByEventID_Call {
	return &ClientSDKMock_GetAllCreatorByEventID_Call{Call: _e.mock.On("GetAllCreatorByEventID", eventID)}
}

func (_c *ClientSDKMock_GetAllCreatorByEventID_Call) Run(run func(eventID int64)) *ClientSDKMock_GetAllCreatorByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorByEventID_Call) Return(_a0 *comics.CreatorDataWrapper, _a1 error) *ClientSDKMock_GetAllCreatorByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorByEventID_Call) RunAndReturn(run func(int64) (*comics.CreatorDataWrapper, error)) *ClientSDKMock_GetAllCreatorByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCreatorBySeriesID provides a mock function with given fields: seriesID
func (_m *ClientSDKMock) GetAllCreatorBySeriesID(seriesID int64) (*comics.CreatorDataWrapper, error) {
	ret := _m.Called(seriesID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCreatorBySeriesID")
	}

	var r0 *comics.CreatorDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CreatorDataWrapper, error)); ok {
		return rf(seriesID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CreatorDataWrapper); ok {
		r0 = rf(seriesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CreatorDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCreatorBySeriesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCreatorBySeriesID'
type ClientSDKMock_GetAllCreatorBySeriesID_Call struct {
	*mock.Call
}

// GetAllCreatorBySeriesID is a helper method to define mock.On call
//   - seriesID int64
func (_e *ClientSDKMock_Expecter) GetAllCreatorBySeriesID(seriesID interface{}) *ClientSDKMock_GetAllCreatorBySeriesID_Call {
	return &ClientSDKMock_GetAllCreatorBySeriesID_Call{Call: _e.mock.On("GetAllCreatorBySeriesID", seriesID)}
}

func (_c *ClientSDKMock_GetAllCreatorBySeriesID_Call) Run(run func(seriesID int64)) *ClientSDKMock_GetAllCreatorBySeriesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorBySeriesID_Call) Return(_a0 *comics.CreatorDataWrapper, _a1 error) *ClientSDKMock_GetAllCreatorBySeriesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorBySeriesID_Call) RunAndReturn(run func(int64) (*comics.CreatorDataWrapper, error)) *ClientSDKMock_GetAllCreatorBySeriesID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCreatorByStoryID provides a mock function with given fields: storyID
func (_m *ClientSDKMock) GetAllCreatorByStoryID(storyID int64) (*comics.CreatorDataWrapper, error) {
	ret := _m.Called(storyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCreatorByStoryID")
	}

	var r0 *comics.CreatorDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CreatorDataWrapper, error)); ok {
		return rf(storyID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CreatorDataWrapper); ok {
		r0 = rf(storyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CreatorDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(storyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllCreatorByStoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCreatorByStoryID'
type ClientSDKMock_GetAllCreatorByStoryID_Call struct {
	*mock.Call
}

// GetAllCreatorByStoryID is a helper method to define mock.On call
//   - storyID int64
func (_e *ClientSDKMock_Expecter) GetAllCreatorByStoryID(storyID interface{}) *ClientSDKMock_GetAllCreatorByStoryID_Call {
	return &ClientSDKMock_GetAllCreatorByStoryID_Call{Call: _e.mock.On("GetAllCreatorByStoryID", storyID)}
}

func (_c *ClientSDKMock_GetAllCreatorByStoryID_Call) Run(run func(storyID int64)) *ClientSDKMock_GetAllCreatorByStoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorByStoryID_Call) Return(_a0 *comics.CreatorDataWrapper, _a1 error) *ClientSDKMock_GetAllCreatorByStoryID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllCreatorByStoryID_Call) RunAndReturn(run func(int64) (*comics.CreatorDataWrapper, error)) *ClientSDKMock_GetAllCreatorByStoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEvent provides a mock function with given fields:
func (_m *ClientSDKMock) GetAllEvent() (*comics.EventDataWrapper, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvent")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (*comics.EventDataWrapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *comics.EventDataWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEvent'
type ClientSDKMock_GetAllEvent_Call struct {
	*mock.Call
}

// GetAllEvent is a helper method to define mock.On call
func (_e *ClientSDKMock_Expecter) GetAllEvent() *ClientSDKMock_GetAllEvent_Call {
	return &ClientSDKMock_GetAllEvent_Call{Call: _e.mock.On("GetAllEvent")}
}

func (_c *ClientSDKMock_GetAllEvent_Call) Run(run func()) *ClientSDKMock_GetAllEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientSDKMock_GetAllEvent_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetAllEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllEvent_Call) RunAndReturn(run func() (*comics.EventDataWrapper, error)) *ClientSDKMock_GetAllEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEventByCharacterID provides a mock function with given fields: characterID
func (_m *ClientSDKMock) GetAllEventByCharacterID(characterID int64) (*comics.EventDataWrapper, error) {
	ret := _m.Called(characterID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventByCharacterID")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.EventDataWrapper, error)); ok {
		return rf(characterID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.EventDataWrapper); ok {
		r0 = rf(characterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(characterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllEventByCharacterID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEventByCharacterID'
type ClientSDKMock_GetAllEventByCharacterID_Call struct {
	*mock.Call
}

// GetAllEventByCharacterID is a helper method to define mock.On call
//   - characterID int64
func (_e *ClientSDKMock_Expecter) GetAllEventByCharacterID(characterID interface{}) *ClientSDKMock_GetAllEventByCharacterID_Call {
	return &ClientSDKMock_GetAllEventByCharacterID_Call{Call: _e.mock.On("GetAllEventByCharacterID", characterID)}
}

func (_c *ClientSDKMock_GetAllEventByCharacterID_Call) Run(run func(characterID int64)) *ClientSDKMock_GetAllEventByCharacterID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllEventByCharacterID_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetAllEventByCharacterID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllEventByCharacterID_Call) RunAndReturn(run func(int64) (*comics.EventDataWrapper, error)) *ClientSDKMock_GetAllEventByCharacterID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEventByComicID provides a mock function with given fields: comicID
func (_m *ClientSDKMock) GetAllEventByComicID(comicID int64) (*comics.EventDataWrapper, error) {
	ret := _m.Called(comicID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventByComicID")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.EventDataWrapper, error)); ok {
		return rf(comicID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.EventDataWrapper); ok {
		r0 = rf(comicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(comicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllEventByComicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEventByComicID'
type ClientSDKMock_GetAllEventByComicID_Call struct {
	*mock.Call
}

// GetAllEventByComicID is a helper method to define mock.On call
//   - comicID int64
func (_e *ClientSDKMock_Expecter) GetAllEventByComicID(comicID interface{}) *ClientSDKMock_GetAllEventByComicID_Call {
	return &ClientSDKMock_GetAllEventByComicID_Call{Call: _e.mock.On("GetAllEventByComicID", comicID)}
}

func (_c *ClientSDKMock_GetAllEventByComicID_Call) Run(run func(comicID int64)) *ClientSDKMock_GetAllEventByComicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllEventByComicID_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetAllEventByComicID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllEventByComicID_Call) RunAndReturn(run func(int64) (*comics.EventDataWrapper, error)) *ClientSDKMock_GetAllEventByComicID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEventByCreatorID provides a mock function with given fields: creatorID
func (_m *ClientSDKMock) GetAllEventByCreatorID(creatorID int64) (*comics.EventDataWrapper, error) {
	ret := _m.Called(creatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventByCreatorID")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.EventDataWrapper, error)); ok {
		return rf(creatorID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.EventDataWrapper); ok {
		r0 = rf(creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllEventByCreatorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEventByCreatorID'
type ClientSDKMock_GetAllEventByCreatorID_Call struct {
	*mock.Call
}

// GetAllEventByCreatorID is a helper method to define mock.On call
//   - creatorID int64
func (_e *ClientSDKMock_Expecter) GetAllEventByCreatorID(creatorID interface{}) *ClientSDKMock_GetAllEventByCreatorID_Call {
	return &ClientSDKMock_GetAllEventByCreatorID_Call{Call: _e.mock.On("GetAllEventByCreatorID", creatorID)}
}

func (_c *ClientSDKMock_GetAllEventByCreatorID_Call) Run(run func(creatorID int64)) *ClientSDKMock_GetAllEventByCreatorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllEventByCreatorID_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetAllEventByCreatorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllEventByCreatorID_Call) RunAndReturn(run func(int64) (*comics.EventDataWrapper, error)) *ClientSDKMock_GetAllEventByCreatorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEventBySeriesID provides a mock function with given fields: seriesID
func (_m *ClientSDKMock) GetAllEventBySeriesID(seriesID int64) (*comics.EventDataWrapper, error) {
	ret := _m.Called(seriesID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventBySeriesID")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.EventDataWrapper, error)); ok {
		return rf(seriesID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.EventDataWrapper); ok {
		r0 = rf(seriesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllEventBySeriesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEventBySeriesID'
type ClientSDKMock_GetAllEventBySeriesID_Call struct {
	*mock.Call
}

// GetAllEventBySeriesID is a helper method to define mock.On call
//   - seriesID int64
func (_e *ClientSDKMock_Expecter) GetAllEventBySeriesID(seriesID interface{}) *ClientSDKMock_GetAllEventBySeriesID_Call {
	return &ClientSDKMock_GetAllEventBySeriesID_Call{Call: _e.mock.On("GetAllEventBySeriesID", seriesID)}
}

func (_c *ClientSDKMock_GetAllEventBySeriesID_Call) Run(run func(seriesID int64)) *ClientSDKMock_GetAllEventBySeriesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllEventBySeriesID_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetAllEventBySeriesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllEventBySeriesID_Call) RunAndReturn(run func(int64) (*comics.EventDataWrapper, error)) *ClientSDKMock_GetAllEventBySeriesID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEventByStoryID provides a mock function with given fields: storyID
func (_m *ClientSDKMock) GetAllEventByStoryID(storyID int64) (*comics.EventDataWrapper, error) {
	ret := _m.Called(storyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEventByStoryID")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.EventDataWrapper, error)); ok {
		return rf(storyID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.EventDataWrapper); ok {
		r0 = rf(storyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(storyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllEventByStoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEventByStoryID'
type ClientSDKMock_GetAllEventByStoryID_Call struct {
	*mock.Call
}

// GetAllEventByStoryID is a helper method to define mock.On call
//   - storyID int64
func (_e *ClientSDKMock_Expecter) GetAllEventByStoryID(storyID interface{}) *ClientSDKMock_GetAllEventByStoryID_Call {
	return &ClientSDKMock_GetAllEventByStoryID_Call{Call: _e.mock.On("GetAllEventByStoryID", storyID)}
}

func (_c *ClientSDKMock_GetAllEventByStoryID_Call) Run(run func(storyID int64)) *ClientSDKMock_GetAllEventByStoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllEventByStoryID_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetAllEventByStoryID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllEventByStoryID_Call) RunAndReturn(run func(int64) (*comics.EventDataWrapper, error)) *ClientSDKMock_GetAllEventByStoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeries provides a mock function with given fields:
func (_m *ClientSDKMock) GetAllSeries() (*comics.SeriesDataWrapper, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeries")
	}

	var r0 *comics.SeriesDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (*comics.SeriesDataWrapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *comics.SeriesDataWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.SeriesDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllSeries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeries'
type ClientSDKMock_GetAllSeries_Call struct {
	*mock.Call
}

// GetAllSeries is a helper method to define mock.On call
func (_e *ClientSDKMock_Expecter) GetAllSeries() *ClientSDKMock_GetAllSeries_Call {
	return &ClientSDKMock_GetAllSeries_Call{Call: _e.mock.On("GetAllSeries")}
}

func (_c *ClientSDKMock_GetAllSeries_Call) Run(run func()) *ClientSDKMock_GetAllSeries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientSDKMock_GetAllSeries_Call) Return(_a0 *comics.SeriesDataWrapper, _a1 error) *ClientSDKMock_GetAllSeries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllSeries_Call) RunAndReturn(run func() (*comics.SeriesDataWrapper, error)) *ClientSDKMock_GetAllSeries_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeriesByCharacterID provides a mock function with given fields: characterID
func (_m *ClientSDKMock) GetAllSeriesByCharacterID(characterID int64) (*comics.SeriesDataWrapper, error) {
	ret := _m.Called(characterID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeriesByCharacterID")
	}

	var r0 *comics.SeriesDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.SeriesDataWrapper, error)); ok {
		return rf(characterID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.SeriesDataWrapper); ok {
		r0 = rf(characterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.SeriesDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(characterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllSeriesByCharacterID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeriesByCharacterID'
type ClientSDKMock_GetAllSeriesByCharacterID_Call struct {
	*mock.Call
}

// GetAllSeriesByCharacterID is a helper method to define mock.On call
//   - characterID int64
func (_e *ClientSDKMock_Expecter) GetAllSeriesByCharacterID(characterID interface{}) *ClientSDKMock_GetAllSeriesByCharacterID_Call {
	return &ClientSDKMock_GetAllSeriesByCharacterID_Call{Call: _e.mock.On("GetAllSeriesByCharacterID", characterID)}
}

func (_c *ClientSDKMock_GetAllSeriesByCharacterID_Call) Run(run func(characterID int64)) *ClientSDKMock_GetAllSeriesByCharacterID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByCharacterID_Call) Return(_a0 *comics.SeriesDataWrapper, _a1 error) *ClientSDKMock_GetAllSeriesByCharacterID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByCharacterID_Call) RunAndReturn(run func(int64) (*comics.SeriesDataWrapper, error)) *ClientSDKMock_GetAllSeriesByCharacterID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeriesByCreatorID provides a mock function with given fields: creatorID
func (_m *ClientSDKMock) GetAllSeriesByCreatorID(creatorID int64) (*comics.SeriesDataWrapper, error) {
	ret := _m.Called(creatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeriesByCreatorID")
	}

	var r0 *comics.SeriesDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.SeriesDataWrapper, error)); ok {
		return rf(creatorID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.SeriesDataWrapper); ok {
		r0 = rf(creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.SeriesDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllSeriesByCreatorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeriesByCreatorID'
type ClientSDKMock_GetAllSeriesByCreatorID_Call struct {
	*mock.Call
}

// GetAllSeriesByCreatorID is a helper method to define mock.On call
//   - creatorID int64
func (_e *ClientSDKMock_Expecter) GetAllSeriesByCreatorID(creatorID interface{}) *ClientSDKMock_GetAllSeriesByCreatorID_Call {
	return &ClientSDKMock_GetAllSeriesByCreatorID_Call{Call: _e.mock.On("GetAllSeriesByCreatorID", creatorID)}
}

func (_c *ClientSDKMock_GetAllSeriesByCreatorID_Call) Run(run func(creatorID int64)) *ClientSDKMock_GetAllSeriesByCreatorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByCreatorID_Call) Return(_a0 *comics.SeriesDataWrapper, _a1 error) *ClientSDKMock_GetAllSeriesByCreatorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByCreatorID_Call) RunAndReturn(run func(int64) (*comics.SeriesDataWrapper, error)) *ClientSDKMock_GetAllSeriesByCreatorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeriesByEventID provides a mock function with given fields: eventID
func (_m *ClientSDKMock) GetAllSeriesByEventID(eventID int64) (*comics.SeriesDataWrapper, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeriesByEventID")
	}

	var r0 *comics.SeriesDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.SeriesDataWrapper, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.SeriesDataWrapper); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.SeriesDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllSeriesByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeriesByEventID'
type ClientSDKMock_GetAllSeriesByEventID_Call struct {
	*mock.Call
}

// GetAllSeriesByEventID is a helper method to define mock.On call
//   - eventID int64
func (_e *ClientSDKMock_Expecter) GetAllSeriesByEventID(eventID interface{}) *ClientSDKMock_GetAllSeriesByEventID_Call {
	return &ClientSDKMock_GetAllSeriesByEventID_Call{Call: _e.mock.On("GetAllSeriesByEventID", eventID)}
}

func (_c *ClientSDKMock_GetAllSeriesByEventID_Call) Run(run func(eventID int64)) *ClientSDKMock_GetAllSeriesByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByEventID_Call) Return(_a0 *comics.SeriesDataWrapper, _a1 error) *ClientSDKMock_GetAllSeriesByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByEventID_Call) RunAndReturn(run func(int64) (*comics.SeriesDataWrapper, error)) *ClientSDKMock_GetAllSeriesByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSeriesByStoryID provides a mock function with given fields: storyID
func (_m *ClientSDKMock) GetAllSeriesByStoryID(storyID int64) (*comics.SeriesDataWrapper, error) {
	ret := _m.Called(storyID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSeriesByStoryID")
	}

	var r0 *comics.SeriesDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.SeriesDataWrapper, error)); ok {
		return rf(storyID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.SeriesDataWrapper); ok {
		r0 = rf(storyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.SeriesDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(storyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllSeriesByStoryID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSeriesByStoryID'
type ClientSDKMock_GetAllSeriesByStoryID_Call struct {
	*mock.Call
}

// GetAllSeriesByStoryID is a helper method to define mock.On call
//   - storyID int64
func (_e *ClientSDKMock_Expecter) GetAllSeriesByStoryID(storyID interface{}) *ClientSDKMock_GetAllSeriesByStoryID_Call {
	return &ClientSDKMock_GetAllSeriesByStoryID_Call{Call: _e.mock.On("GetAllSeriesByStoryID", storyID)}
}

func (_c *ClientSDKMock_GetAllSeriesByStoryID_Call) Run(run func(storyID int64)) *ClientSDKMock_GetAllSeriesByStoryID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByStoryID_Call) Return(_a0 *comics.SeriesDataWrapper, _a1 error) *ClientSDKMock_GetAllSeriesByStoryID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllSeriesByStoryID_Call) RunAndReturn(run func(int64) (*comics.SeriesDataWrapper, error)) *ClientSDKMock_GetAllSeriesByStoryID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStory provides a mock function with given fields:
func (_m *ClientSDKMock) GetAllStory() (*comics.StoryDataWrapper, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllStory")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func() (*comics.StoryDataWrapper, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *comics.StoryDataWrapper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllStory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStory'
type ClientSDKMock_GetAllStory_Call struct {
	*mock.Call
}

// GetAllStory is a helper method to define mock.On call
func (_e *ClientSDKMock_Expecter) GetAllStory() *ClientSDKMock_GetAllStory_Call {
	return &ClientSDKMock_GetAllStory_Call{Call: _e.mock.On("GetAllStory")}
}

func (_c *ClientSDKMock_GetAllStory_Call) Run(run func()) *ClientSDKMock_GetAllStory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientSDKMock_GetAllStory_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetAllStory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllStory_Call) RunAndReturn(run func() (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetAllStory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStoryByCharacterID provides a mock function with given fields: characterID
func (_m *ClientSDKMock) GetAllStoryByCharacterID(characterID int64) (*comics.StoryDataWrapper, error) {
	ret := _m.Called(characterID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStoryByCharacterID")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.StoryDataWrapper, error)); ok {
		return rf(characterID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.StoryDataWrapper); ok {
		r0 = rf(characterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(characterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllStoryByCharacterID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStoryByCharacterID'
type ClientSDKMock_GetAllStoryByCharacterID_Call struct {
	*mock.Call
}

// GetAllStoryByCharacterID is a helper method to define mock.On call
//   - characterID int64
func (_e *ClientSDKMock_Expecter) GetAllStoryByCharacterID(characterID interface{}) *ClientSDKMock_GetAllStoryByCharacterID_Call {
	return &ClientSDKMock_GetAllStoryByCharacterID_Call{Call: _e.mock.On("GetAllStoryByCharacterID", characterID)}
}

func (_c *ClientSDKMock_GetAllStoryByCharacterID_Call) Run(run func(characterID int64)) *ClientSDKMock_GetAllStoryByCharacterID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByCharacterID_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetAllStoryByCharacterID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByCharacterID_Call) RunAndReturn(run func(int64) (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetAllStoryByCharacterID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStoryByComicID provides a mock function with given fields: comicID
func (_m *ClientSDKMock) GetAllStoryByComicID(comicID int64) (*comics.StoryDataWrapper, error) {
	ret := _m.Called(comicID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStoryByComicID")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.StoryDataWrapper, error)); ok {
		return rf(comicID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.StoryDataWrapper); ok {
		r0 = rf(comicID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(comicID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllStoryByComicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStoryByComicID'
type ClientSDKMock_GetAllStoryByComicID_Call struct {
	*mock.Call
}

// GetAllStoryByComicID is a helper method to define mock.On call
//   - comicID int64
func (_e *ClientSDKMock_Expecter) GetAllStoryByComicID(comicID interface{}) *ClientSDKMock_GetAllStoryByComicID_Call {
	return &ClientSDKMock_GetAllStoryByComicID_Call{Call: _e.mock.On("GetAllStoryByComicID", comicID)}
}

func (_c *ClientSDKMock_GetAllStoryByComicID_Call) Run(run func(comicID int64)) *ClientSDKMock_GetAllStoryByComicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByComicID_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetAllStoryByComicID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByComicID_Call) RunAndReturn(run func(int64) (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetAllStoryByComicID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStoryByCreatorID provides a mock function with given fields: creatorID
func (_m *ClientSDKMock) GetAllStoryByCreatorID(creatorID int64) (*comics.StoryDataWrapper, error) {
	ret := _m.Called(creatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStoryByCreatorID")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.StoryDataWrapper, error)); ok {
		return rf(creatorID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.StoryDataWrapper); ok {
		r0 = rf(creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllStoryByCreatorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStoryByCreatorID'
type ClientSDKMock_GetAllStoryByCreatorID_Call struct {
	*mock.Call
}

// GetAllStoryByCreatorID is a helper method to define mock.On call
//   - creatorID int64
func (_e *ClientSDKMock_Expecter) GetAllStoryByCreatorID(creatorID interface{}) *ClientSDKMock_GetAllStoryByCreatorID_Call {
	return &ClientSDKMock_GetAllStoryByCreatorID_Call{Call: _e.mock.On("GetAllStoryByCreatorID", creatorID)}
}

func (_c *ClientSDKMock_GetAllStoryByCreatorID_Call) Run(run func(creatorID int64)) *ClientSDKMock_GetAllStoryByCreatorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByCreatorID_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetAllStoryByCreatorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByCreatorID_Call) RunAndReturn(run func(int64) (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetAllStoryByCreatorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStoryByEventID provides a mock function with given fields: eventID
func (_m *ClientSDKMock) GetAllStoryByEventID(eventID int64) (*comics.StoryDataWrapper, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStoryByEventID")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.StoryDataWrapper, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.StoryDataWrapper); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllStoryByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStoryByEventID'
type ClientSDKMock_GetAllStoryByEventID_Call struct {
	*mock.Call
}

// GetAllStoryByEventID is a helper method to define mock.On call
//   - eventID int64
func (_e *ClientSDKMock_Expecter) GetAllStoryByEventID(eventID interface{}) *ClientSDKMock_GetAllStoryByEventID_Call {
	return &ClientSDKMock_GetAllStoryByEventID_Call{Call: _e.mock.On("GetAllStoryByEventID", eventID)}
}

func (_c *ClientSDKMock_GetAllStoryByEventID_Call) Run(run func(eventID int64)) *ClientSDKMock_GetAllStoryByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByEventID_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetAllStoryByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllStoryByEventID_Call) RunAndReturn(run func(int64) (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetAllStoryByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllStoryBySeriesID provides a mock function with given fields: seriesID
func (_m *ClientSDKMock) GetAllStoryBySeriesID(seriesID int64) (*comics.StoryDataWrapper, error) {
	ret := _m.Called(seriesID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStoryBySeriesID")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.StoryDataWrapper, error)); ok {
		return rf(seriesID)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.StoryDataWrapper); ok {
		r0 = rf(seriesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(seriesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetAllStoryBySeriesID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStoryBySeriesID'
type ClientSDKMock_GetAllStoryBySeriesID_Call struct {
	*mock.Call
}

// GetAllStoryBySeriesID is a helper method to define mock.On call
//   - seriesID int64
func (_e *ClientSDKMock_Expecter) GetAllStoryBySeriesID(seriesID interface{}) *ClientSDKMock_GetAllStoryBySeriesID_Call {
	return &ClientSDKMock_GetAllStoryBySeriesID_Call{Call: _e.mock.On("GetAllStoryBySeriesID", seriesID)}
}

func (_c *ClientSDKMock_GetAllStoryBySeriesID_Call) Run(run func(seriesID int64)) *ClientSDKMock_GetAllStoryBySeriesID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetAllStoryBySeriesID_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetAllStoryBySeriesID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetAllStoryBySeriesID_Call) RunAndReturn(run func(int64) (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetAllStoryBySeriesID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharacterByID provides a mock function with given fields: id
func (_m *ClientSDKMock) GetCharacterByID(id int64) (*comics.CharacterDataWrapper, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCharacterByID")
	}

	var r0 *comics.CharacterDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CharacterDataWrapper, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CharacterDataWrapper); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CharacterDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetCharacterByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharacterByID'
type ClientSDKMock_GetCharacterByID_Call struct {
	*mock.Call
}

// GetCharacterByID is a helper method to define mock.On call
//   - id int64
func (_e *ClientSDKMock_Expecter) GetCharacterByID(id interface{}) *ClientSDKMock_GetCharacterByID_Call {
	return &ClientSDKMock_GetCharacterByID_Call{Call: _e.mock.On("GetCharacterByID", id)}
}

func (_c *ClientSDKMock_GetCharacterByID_Call) Run(run func(id int64)) *ClientSDKMock_GetCharacterByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetCharacterByID_Call) Return(_a0 *comics.CharacterDataWrapper, _a1 error) *ClientSDKMock_GetCharacterByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetCharacterByID_Call) RunAndReturn(run func(int64) (*comics.CharacterDataWrapper, error)) *ClientSDKMock_GetCharacterByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetComicByID provides a mock function with given fields: id
func (_m *ClientSDKMock) GetComicByID(id int64) (*comics.ComicDataWrapper, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetComicByID")
	}

	var r0 *comics.ComicDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.ComicDataWrapper, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.ComicDataWrapper); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.ComicDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetComicByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComicByID'
type ClientSDKMock_GetComicByID_Call struct {
	*mock.Call
}

// GetComicByID is a helper method to define mock.On call
//   - id int64
func (_e *ClientSDKMock_Expecter) GetComicByID(id interface{}) *ClientSDKMock_GetComicByID_Call {
	return &ClientSDKMock_GetComicByID_Call{Call: _e.mock.On("GetComicByID", id)}
}

func (_c *ClientSDKMock_GetComicByID_Call) Run(run func(id int64)) *ClientSDKMock_GetComicByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetComicByID_Call) Return(_a0 *comics.ComicDataWrapper, _a1 error) *ClientSDKMock_GetComicByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetComicByID_Call) RunAndReturn(run func(int64) (*comics.ComicDataWrapper, error)) *ClientSDKMock_GetComicByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorByID provides a mock function with given fields: id
func (_m *ClientSDKMock) GetCreatorByID(id int64) (*comics.CreatorDataWrapper, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorByID")
	}

	var r0 *comics.CreatorDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.CreatorDataWrapper, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.CreatorDataWrapper); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.CreatorDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetCreatorByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorByID'
type ClientSDKMock_GetCreatorByID_Call struct {
	*mock.Call
}

// GetCreatorByID is a helper method to define mock.On call
//   - id int64
func (_e *ClientSDKMock_Expecter) GetCreatorByID(id interface{}) *ClientSDKMock_GetCreatorByID_Call {
	return &ClientSDKMock_GetCreatorByID_Call{Call: _e.mock.On("GetCreatorByID", id)}
}

func (_c *ClientSDKMock_GetCreatorByID_Call) Run(run func(id int64)) *ClientSDKMock_GetCreatorByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetCreatorByID_Call) Return(_a0 *comics.CreatorDataWrapper, _a1 error) *ClientSDKMock_GetCreatorByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetCreatorByID_Call) RunAndReturn(run func(int64) (*comics.CreatorDataWrapper, error)) *ClientSDKMock_GetCreatorByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventByID provides a mock function with given fields: id
func (_m *ClientSDKMock) GetEventByID(id int64) (*comics.EventDataWrapper, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 *comics.EventDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.EventDataWrapper, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.EventDataWrapper); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.EventDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetEventByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventByID'
type ClientSDKMock_GetEventByID_Call struct {
	*mock.Call
}

// GetEventByID is a helper method to define mock.On call
//   - id int64
func (_e *ClientSDKMock_Expecter) GetEventByID(id interface{}) *ClientSDKMock_GetEventByID_Call {
	return &ClientSDKMock_GetEventByID_Call{Call: _e.mock.On("GetEventByID", id)}
}

func (_c *ClientSDKMock_GetEventByID_Call) Run(run func(id int64)) *ClientSDKMock_GetEventByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetEventByID_Call) Return(_a0 *comics.EventDataWrapper, _a1 error) *ClientSDKMock_GetEventByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetEventByID_Call) RunAndReturn(run func(int64) (*comics.EventDataWrapper, error)) *ClientSDKMock_GetEventByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSeriesByID provides a mock function with given fields: id
func (_m *ClientSDKMock) GetSeriesByID(id int64) (*comics.SeriesDataWrapper, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSeriesByID")
	}

	var r0 *comics.SeriesDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.SeriesDataWrapper, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.SeriesDataWrapper); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.SeriesDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetSeriesByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSeriesByID'
type ClientSDKMock_GetSeriesByID_Call struct {
	*mock.Call
}

// GetSeriesByID is a helper method to define mock.On call
//   - id int64
func (_e *ClientSDKMock_Expecter) GetSeriesByID(id interface{}) *ClientSDKMock_GetSeriesByID_Call {
	return &ClientSDKMock_GetSeriesByID_Call{Call: _e.mock.On("GetSeriesByID", id)}
}

func (_c *ClientSDKMock_GetSeriesByID_Call) Run(run func(id int64)) *ClientSDKMock_GetSeriesByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetSeriesByID_Call) Return(_a0 *comics.SeriesDataWrapper, _a1 error) *ClientSDKMock_GetSeriesByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetSeriesByID_Call) RunAndReturn(run func(int64) (*comics.SeriesDataWrapper, error)) *ClientSDKMock_GetSeriesByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoryByID provides a mock function with given fields: id
func (_m *ClientSDKMock) GetStoryByID(id int64) (*comics.StoryDataWrapper, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStoryByID")
	}

	var r0 *comics.StoryDataWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*comics.StoryDataWrapper, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *comics.StoryDataWrapper); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comics.StoryDataWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientSDKMock_GetStoryByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoryByID'
type ClientSDKMock_GetStoryByID_Call struct {
	*mock.Call
}

// GetStoryByID is a helper method to define mock.On call
//   - id int64
func (_e *ClientSDKMock_Expecter) GetStoryByID(id interface{}) *ClientSDKMock_GetStoryByID_Call {
	return &ClientSDKMock_GetStoryByID_Call{Call: _e.mock.On("GetStoryByID", id)}
}

func (_c *ClientSDKMock_GetStoryByID_Call) Run(run func(id int64)) *ClientSDKMock_GetStoryByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ClientSDKMock_GetStoryByID_Call) Return(_a0 *comics.StoryDataWrapper, _a1 error) *ClientSDKMock_GetStoryByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientSDKMock_GetStoryByID_Call) RunAndReturn(run func(int64) (*comics.StoryDataWrapper, error)) *ClientSDKMock_GetStoryByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientSDKMock creates a new instance of ClientSDKMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientSDKMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientSDKMock {
	mock := &ClientSDKMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
